# Define an "upstream" for each backend service. This is the recommended way.
# NGINX will resolve the service name (e.g., "frontend") to the correct container IP.

events {
    worker_connections 1024;
}

http {
    # Define upstreams INSIDE the http block
    upstream frontend_server {
        server frontend:80;  # Changed from port 80 to 3000 for development
    }

    upstream backend_server {
        server backend:80;
    }

    upstream predictor_server {
        server predictor:8001;  # Change from 8000 to 8001
    }

    upstream scraper_server {
        server scraper:9000;
    }

    server {
        listen 80;
        server_name localhost;

        # ---- Scraper Routes (FIRST - most specific) ----
    

        # ---- Scraper Route (with /api/scraper/ prefix) ----
        location /api/scraper/ {
            proxy_pass http://scraper_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ---- Backend Route (handles all /api/ requests) ----
        location /api/ {
            proxy_pass http://backend_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ---- Frontend Route (LAST - catch all) ----
        location / {
            proxy_pass http://frontend_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}